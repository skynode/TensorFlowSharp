<Type Name="TFSession" FullName="TensorFlow.TFSession">
  <TypeSignature Language="C#" Value="public class TFSession : TensorFlow.TFDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TFSession extends TensorFlow.TFDisposable" />
  <AssemblyInfo>
    <AssemblyName>TensorFlowSharp</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>TensorFlow.TFDisposable</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Drives the execution of a graph
            </summary>
    <remarks>
      <para>
            This creates a new context to execute a TFGraph.   You can use the 
            constructor to create an empty session, or you can load an existing
            model using the <see cref="M:TensorFlow.TFSession.FromSavedModel(TensorFlow.TFSessionOptions,TensorFlow.TFBuffer,System.String,System.String[],TensorFlow.TFGraph,TensorFlow.TFBuffer,TensorFlow.TFStatus)" /> static method in this class.
            </para>
      <para>
            To execute operations with the graph, call the <see cref="M:TensorFlow.TFSession.GetRunner" />  method
            which returns an object that you can use to build the operation by providing
            the inputs, requesting the operations that you want to execute and the desired outputs.
            </para>
      <para>
            The <see cref="M:TensorFlow.TFSession.GetRunner" /> method is a high-level helper function that wraps a
            call to the <see cref="M:TensorFlow.TFSession.Run(TensorFlow.TFOutput[],TensorFlow.TFTensor[],TensorFlow.TFOutput[],TensorFlow.TFOperation[],TensorFlow.TFBuffer,TensorFlow.TFBuffer,TensorFlow.TFStatus)" /> method which just takes too many parameters that must
            be kept in sync.
            </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TFSession (TensorFlow.TFStatus status = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class TensorFlow.TFStatus status) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="status" Type="TensorFlow.TFStatus" />
      </Parameters>
      <Docs>
        <param name="status">Status buffer, if specified a status code will be left here, if not specified, a <see cref="T:TensorFlow.TFException" /> exception is raised if there is an error.</param>
        <summary>
            Creates a new execution session with an empty graph
            </summary>
        <remarks>
            The created graph can be retrieved using the Graph property on the session.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TFSession (TensorFlow.TFGraph graph, TensorFlow.TFStatus status = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class TensorFlow.TFGraph graph, class TensorFlow.TFStatus status) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="graph" Type="TensorFlow.TFGraph" />
        <Parameter Name="status" Type="TensorFlow.TFStatus" />
      </Parameters>
      <Docs>
        <param name="graph">The Graph to which this session is associated.</param>
        <param name="status">Status buffer, if specified a status code will be left here, if not specified, a <see cref="T:TensorFlow.TFException" /> exception is raised if there is an error.</param>
        <summary>
            Creates a new execution session associated with the specified session graph.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TFSession (TensorFlow.TFGraph graph, TensorFlow.TFSessionOptions sessionOptions, TensorFlow.TFStatus status = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class TensorFlow.TFGraph graph, class TensorFlow.TFSessionOptions sessionOptions, class TensorFlow.TFStatus status) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="graph" Type="TensorFlow.TFGraph" />
        <Parameter Name="sessionOptions" Type="TensorFlow.TFSessionOptions" />
        <Parameter Name="status" Type="TensorFlow.TFStatus" />
      </Parameters>
      <Docs>
        <param name="graph">The Graph to which this session is associated.</param>
        <param name="sessionOptions">Session options.</param>
        <param name="status">Status buffer, if specified a status code will be left here, if not specified, a <see cref="T:TensorFlow.TFException" /> exception is raised if there is an error.</param>
        <summary>
            Creates a new execution session associated with the specified session graph with some configuration options.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloseSession">
      <MemberSignature Language="C#" Value="public void CloseSession (TensorFlow.TFStatus status = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CloseSession(class TensorFlow.TFStatus status) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="status" Type="TensorFlow.TFStatus" />
      </Parameters>
      <Docs>
        <param name="status">Status buffer, if specified a status code will be left here, if not specified, a <see cref="T:TensorFlow.TFException" /> exception is raised if there is an error.</param>
        <summary>
            Closes the session.  Contacts any other processes associated with the session, if applicable.
            </summary>
        <remarks>
            Can not be called after calling DeleteSession.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteSession">
      <MemberSignature Language="C#" Value="public void DeleteSession (TensorFlow.TFStatus status = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteSession(class TensorFlow.TFStatus status) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="status" Type="TensorFlow.TFStatus" />
      </Parameters>
      <Docs>
        <param name="status">Status.</param>
        <summary>
            Deletes the session.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromSavedModel">
      <MemberSignature Language="C#" Value="public TensorFlow.TFSession FromSavedModel (TensorFlow.TFSessionOptions sessionOptions, TensorFlow.TFBuffer runOptions, string exportDir, string[] tags, TensorFlow.TFGraph graph, TensorFlow.TFBuffer metaGraphDef, TensorFlow.TFStatus status = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFSession FromSavedModel(class TensorFlow.TFSessionOptions sessionOptions, class TensorFlow.TFBuffer runOptions, string exportDir, string[] tags, class TensorFlow.TFGraph graph, class TensorFlow.TFBuffer metaGraphDef, class TensorFlow.TFStatus status) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFSession</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sessionOptions" Type="TensorFlow.TFSessionOptions" />
        <Parameter Name="runOptions" Type="TensorFlow.TFBuffer" />
        <Parameter Name="exportDir" Type="System.String" />
        <Parameter Name="tags" Type="System.String[]" />
        <Parameter Name="graph" Type="TensorFlow.TFGraph" />
        <Parameter Name="metaGraphDef" Type="TensorFlow.TFBuffer" />
        <Parameter Name="status" Type="TensorFlow.TFStatus" />
      </Parameters>
      <Docs>
        <param name="sessionOptions">Session options to use for the new session.</param>
        <param name="runOptions">Options to use to initialize the state (can be null).</param>
        <param name="exportDir">must be set to the path of the exported SavedModel.</param>
        <param name="tags">must include the set of tags used to identify one MetaGraphDef in the SavedModel.</param>
        <param name="graph">This must be a newly created graph.</param>
        <param name="metaGraphDef">On success, this will be populated on return with the contents of the MetaGraphDef (can be null).</param>
        <param name="status">Status buffer, if specified a status code will be left here, if not specified, a <see cref="T:TensorFlow.TFException" /> exception is raised if there is an error.</param>
        <summary>
            Creates a session and graph from a saved session model
            </summary>
        <returns>On success, this populates the provided <paramref name="graph" /> with the contents of the graph stored in the specified model and <paramref name="metaGraphDef" /> with the MetaGraphDef of the loaded model.</returns>
        <remarks>
            This function creates a new session using the specified <paramref name="sessionOptions" /> and then initializes
            the state (restoring tensors and other assets) using <paramref name="runOptions" /></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRunner">
      <MemberSignature Language="C#" Value="public TensorFlow.TFSession.Runner GetRunner ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFSession/Runner GetRunner() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFSession+Runner</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets a new runner, this provides a simpler API to prepare the inputs to run on a session
            </summary>
        <returns>The runner.</returns>
        <remarks>
            The runner has a simple API that allows developers to call the AddTarget, AddInput, AddOutput and Fetch
            to construct the parameters that will be passed to the TFSession.Run method.
            
            The Run method will return an array of TFTensor values, one for each invocation to the Fetch method.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Graph">
      <MemberSignature Language="C#" Value="public TensorFlow.TFGraph Graph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class TensorFlow.TFGraph Graph" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFGraph</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the graph associated with this TensorFlow session.
            </summary>
        <value>The graph.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PartialRun">
      <MemberSignature Language="C#" Value="public TensorFlow.TFTensor[] PartialRun (TensorFlow.TFSession.PartialRunToken token, TensorFlow.TFOutput[] inputs, TensorFlow.TFTensor[] inputValues, TensorFlow.TFOutput[] outputs, TensorFlow.TFOperation[] targetOpers, TensorFlow.TFStatus status = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFTensor[] PartialRun(class TensorFlow.TFSession/PartialRunToken token, valuetype TensorFlow.TFOutput[] inputs, class TensorFlow.TFTensor[] inputValues, valuetype TensorFlow.TFOutput[] outputs, class TensorFlow.TFOperation[] targetOpers, class TensorFlow.TFStatus status) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFTensor[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="TensorFlow.TFSession+PartialRunToken" />
        <Parameter Name="inputs" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="inputValues" Type="TensorFlow.TFTensor[]" />
        <Parameter Name="outputs" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="targetOpers" Type="TensorFlow.TFOperation[]" />
        <Parameter Name="status" Type="TensorFlow.TFStatus" />
      </Parameters>
      <Docs>
        <param name="token">To be added.</param>
        <param name="inputs">To be added.</param>
        <param name="inputValues">To be added.</param>
        <param name="outputs">To be added.</param>
        <param name="targetOpers">To be added.</param>
        <param name="status">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PartialRunSetup">
      <MemberSignature Language="C#" Value="public TensorFlow.TFSession.PartialRunToken PartialRunSetup (TensorFlow.TFOutput[] inputs, TensorFlow.TFOutput[] outputs, TensorFlow.TFOperation[] targetOpers, TensorFlow.TFStatus status = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFSession/PartialRunToken PartialRunSetup(valuetype TensorFlow.TFOutput[] inputs, valuetype TensorFlow.TFOutput[] outputs, class TensorFlow.TFOperation[] targetOpers, class TensorFlow.TFStatus status) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFSession+PartialRunToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="outputs" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="targetOpers" Type="TensorFlow.TFOperation[]" />
        <Parameter Name="status" Type="TensorFlow.TFStatus" />
      </Parameters>
      <Docs>
        <param name="inputs">Inputs.</param>
        <param name="outputs">Outputs.</param>
        <param name="targetOpers">Target operations to run.</param>
        <param name="status">Status buffer, if specified a status code will be left here, if not specified, a <see cref="T:TensorFlow.TFException" /> exception is raised if there is an error.</param>
        <summary>
            Prepares the session for a partial run.
            </summary>
        <returns>A token that can be used to call <see cref="M:TensorFlow.TFSession.PartialRun(TensorFlow.TFSession.PartialRunToken,TensorFlow.TFOutput[],TensorFlow.TFTensor[],TensorFlow.TFOutput[],TensorFlow.TFOperation[],TensorFlow.TFStatus)" /> repeatedly.   To complete your partial run, you should call Dispose on the resulting method.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public TensorFlow.TFTensor[] Run (TensorFlow.TFOutput[] inputs, TensorFlow.TFTensor[] inputValues, TensorFlow.TFOutput[] outputs, TensorFlow.TFOperation[] targetOpers = null, TensorFlow.TFBuffer runMetadata = null, TensorFlow.TFBuffer runOptions = null, TensorFlow.TFStatus status = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFTensor[] Run(valuetype TensorFlow.TFOutput[] inputs, class TensorFlow.TFTensor[] inputValues, valuetype TensorFlow.TFOutput[] outputs, class TensorFlow.TFOperation[] targetOpers, class TensorFlow.TFBuffer runMetadata, class TensorFlow.TFBuffer runOptions, class TensorFlow.TFStatus status) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFTensor[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="inputValues" Type="TensorFlow.TFTensor[]" />
        <Parameter Name="outputs" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="targetOpers" Type="TensorFlow.TFOperation[]" />
        <Parameter Name="runMetadata" Type="TensorFlow.TFBuffer" />
        <Parameter Name="runOptions" Type="TensorFlow.TFBuffer" />
        <Parameter Name="status" Type="TensorFlow.TFStatus" />
      </Parameters>
      <Docs>
        <param name="inputs">Inputs nodes.</param>
        <param name="inputValues">Input values.</param>
        <param name="outputs">Output nodes.</param>
        <param name="targetOpers">Target operations to execute.</param>
        <param name="runMetadata">Run metadata.</param>
        <param name="runOptions">Run options.</param>
        <param name="status">Status buffer, if specified a status code will be left here, if not specified, a <see cref="T:TensorFlow.TFException" /> exception is raised if there is an error.</param>
        <summary>
            Executes a pipeline given the specified inputs, inputValues, outputs, targetOpers, runMetadata and runOptions.   
            A simpler API is available by calling the <see cref="M:GetRunner" /> method which performs all the bookkeeping
            necessary.
            </summary>
        <returns>An array of tensors fetched from the requested outputs.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
